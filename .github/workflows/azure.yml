# This workflow will build and push a node.js application to an Azure Web App when a release is created.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/app-service-plan-manage#create-an-app-service-plan
#
# To configure this workflow:
#
# 1. For Linux apps, add an app setting called WEBSITE_WEBDEPLOY_USE_SCM and set it to true in your app **before downloading the file**.
#      For more instructions see: https://docs.microsoft.com/azure/app-service/configure-common#configure-app-settings
#
# 2. Set up a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE with the value of your Azure publish profile.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the values for the AZURE_WEBAPP_NAME, AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables  (below).
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
on:
  push:
    branches:
      - master

env:
  AZURE_WEBAPP_NAME: doyourchores # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "." # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: "10.x" # set this to the node version to use

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    steps:
      - name: "Login to Azure"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Checkout code
        uses: actions/checkout@v2

      # - name: "Infrastructure setup"
      #   uses: azure/arm-deploy@v1
      #   with:
      #     subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION }}
      #     resourceGroupName: ${{ secrets.AZURE_RG }}
      #     template: ./deploy/template/azure_infrastructure_template.json
      #     parameters: ./deploy/template/azure_infrastructure_parameters.json

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ env.NODE_VERSION }}

      # - name: Execute database Sequelize commands
      #   env:
      #     NODE_ENV: "production"
      #     DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
      #   run: |
      #     npm install
      #     cd backend
      #     npx dotenv sequelize-cli db:drop
      #     npx sequelize-cli db:create
      #     npx sequelize-cli db:migrate
      #     npx sequelize-cli db:seed:all

      #- name: Login to ACR (Azure Container Registry)
      #  uses: azure/docker-login@v1
      #  with:
      #    login-server: "doyourchores.azurecr.io"
      #    username: ${{ secrets.REGISTRY_USERNAME }}
      #    password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and deploy Docker images
       run: |
         docker build ./backend -t doyourchores.azurecr.io/doyourchores:backend
         docker build ./frontend -t doyourchores.azurecr.io/doyourchores:frontend
         docker push doyourchores.azurecr.io/doyourchores:backend
         docker push doyourchores.azurecr.io/doyourchores:frontend

      - name: Set K8s Context
        uses: azure/aks-set-context@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} # Azure credentials
          resource-group: doyourchores
          cluster-name: doyourchoresCluster
        id: login

      - name: Set K8s Secrets
        uses: azure/k8s-create-secret@v1
        with:
          namespace: doyourchores-cluster
          secret-type: generic
          arguments: --from-literal=db-connection-string=${{ secrets.DB_CONNECTION_STRING }}
          secret-name: azure-storage

      - name: Get login creds for ACR
        uses: azure/k8s-create-secret@v1
        with:
          namespace: doyourchores-cluster
          container-registry-url: doyourchores.azurecr.io
          container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
          container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
          secret-name: doyourchores-cr
        id: image-pull-secret

      - name: Deployment of all code
        uses: Azure/k8s-deploy@v1.4
        with:
          imagePullSecrets: |
            doyourchores-cr
          namespace: doyourchores-cluster
          manifests: |
            deploy/k8s/deployment.yml
